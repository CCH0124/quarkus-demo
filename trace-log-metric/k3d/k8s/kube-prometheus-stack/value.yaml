alertmanager:
  enabled: true
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - alert.cch.com
    paths:
      - /
    pathType: Prefix
  service:
    port: 9093
    targetPort: 9093
    type: ClusterIP
  alertmanagerSpec:
    image:
      registry: quay.io
      repository: prometheus/alertmanager
      tag: v0.25.0
    routePrefix: /
    resources:
      limits:
        memory: "400Mi"
grafana:
  enable: true
  defaultDashboardsTimezone: Asia/Taipei
  adminPassword: prom-operator
  ingress:  
    enabled: true
    ingressClassName: nginx
    hosts:
      - grafana.cch.com
    paths:
      - path: /
        pathType: Prefix
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
      isDefaultDatasource: true
      uid: prometheus
      exemplarTraceIdDestinations:
        datasourceUid: tempo
        traceIdLabelName: traceId
  image:
    repository: grafana/grafana
    # Overrides the Grafana image tag whose default is the chart appVersion
    tag: "9.4.7"
    pullPolicy: IfNotPresent
  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000
  livenessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 60
    timeoutSeconds: 30
    failureThreshold: 10
  resources: 
    limits:
      cpu: 100m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  grafana.ini:
    feature_toggles:
        enable: tempoSearch tempoBackendSearch tempoApmTable traceToMetrics
    paths:
      data: /var/lib/grafana/
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    analytics:
      check_for_updates: true
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    server:
      domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ .Values.ingress.hosts | first }}{{ else }}''{{ end }}"
  additionalDataSources:
  #   - name: Prometheus
  #     type: prometheus
  #     uid: prometheus
  #     access: proxy
  #     url: http://prometheus-stack-kube-prom-prometheus:9090
  #     jsonData:
  #       httpMethod: POST
  #       manageAlerts: true
  #       prometheusType: Prometheus
  #       exemplarTraceIdDestinations:
  #         # Prometheus Exemplar Metrics relationated with Tempo trace_id variable.
  #         - name: traceId
  #           datasourceUid: tempo
  #           urlDisplayLabel: View in Tempo
    - name: Loki
      type: loki
      uid: loki
      access: proxy
      editable: true
      url: http://loki-loki-distributed-query-frontend.observability.svc.cluster.local:3100
      jsonData:
         derivedFields:
           # Opentelemetry set trace_id in log and Loki search this metric for relating with Tempo traces.
           - name: traceId
             datasourceUid: tempo
             matcherRegex: "traceId=(\\w+)"
             url: '$${__value.raw}'
    - name: Tempo
      type: tempo
      uid: tempo
      access: proxy
      editable: true
      basicAuth: false
      isDefault: false
      version: 1
      apiVersion: 1
      url: http://tempo-query-frontend.observability.svc.cluster.local:3100
      jsonData:
        httpMethod: GET
        # Tempo redirects to Loki logs by specific trace_id
        tracesToLogs:
          datasourceUid: 'loki'
          tags: [ 'app', 'namespace' ]
          spanStartTimeShift: 1s
          spandEndTimeShift: 1s
          lokiSearch: true
        serviceMap:
          datasourceUid: 'prometheus'
prometheus:
  enabled: true
  service:
    port: 9090
    targetPort: 9090
    type: ClusterIP
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - prometheus.cch.com
    paths:
      - /
    pathType: Prefix
  prometheusSpec:
    image:
      registry: quay.io
      repository: prometheus/prometheus
      tag: v2.42.0
    enableRemoteWriteReceiver: true
    exemplars: 
      maxSize: 100000
    enableFeatures:
        - exemplar-storage
    additionalScrapeConfigs: |
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
        - role: service
        relabel_configs:

        # annotation 'prometheus.io/scrape' must be set to 'true'
        - action: keep
          regex: true
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]

        # service cannot be in kube-system or prom namespaces
        - action: drop
          regex: (kube-system|prom|observability)
          source_labels: [__meta_kubernetes_namespace]

        # service port name must end with word 'http'
        - action: keep
          regex: http
          source_labels: [__meta_kubernetes_service_port_name]

        # allow override of http scheme
        - action: replace
          regex: (https?)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          target_label: __scheme__

        # allow override of default /metrics path
        - action: replace
          regex: (.+)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          target_label: __metrics_path__

        # allow override of default port
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          target_label: __address__
        - {action: labelmap, regex: __meta_kubernetes_service_label_(.+)}
        - action: replace
          source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - action: replace
          source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name
