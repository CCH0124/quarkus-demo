alertmanager:
  enabled: true
  ingress:
    enabled: false
  service:
    port: 9093
    targetPort: 9093
    type: ClusterIP
grafana:
  image:
    tag: "9.3.6"
  grafana.ini:
    feature_toggles:
        enable: tempoSearch tempoBackendSearch tempoApmTable traceToMetrics
  enabled: true
  ingress:  
    enabled: true
    ingressClassName: nginx
    hosts:
      - grafana.cch.com
    path: /
  defaultDashboardsTimezone: Asia/Taipei
  additionalDataSources:
    - name: Prometheus
      type: prometheus
      uid: prometheus
      access: proxy
      url: http://prometheus-stack-kube-prom-prometheus:9090
      jsonData:
        exemplarTraceIdDestinations:
          # Prometheus Exemplar Metrics relationated with Tempo trace_id variable.
          - name: trace_id
            datasourceUid: tempo
            urlDisplayLabel: View in Tempo
    - name: Loki
      type: loki
      uid: loki
      access: proxy
      editable: true
      url: http://loki-loki-distributed-gateway
      jsonData:
         derivedFields:
           # Opentelemetry set trace_id in log and Loki search this metric for relating with Tempo traces.
           - name: traceId
             datasourceUid: tempo
             matcherRegex: "traceId=(\\w+)"
             url: '$${__value.raw}'
    - name: Tempo
      type: tempo
      uid: tempo
      access: proxy
      editable: true
      basicAuth: false
      isDefault: false
      version: 1
      apiVersion: 1
      url: http://tempo-query-frontend.observability.svc.cluster.local:3100
      jsonData:
        httpMethod: GET
        # Tempo redirects to Loki logs by specific trace_id
        tracesToLogs:
          datasourceUid: 'loki'
          tags: [ 'app', 'namespace' ]
          spanStartTimeShift: 1s
          spandEndTimeShift: 1s
          lokiSearch: true
        serviceMap:
          datasourceUid: 'prometheus'
prometheus:
  enabled: true
  service:
    port: 9090
    targetPort: 9090
    type: ClusterIP
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - prometheus.cch.com
    paths:
      - /
  prometheusSpec:
    enableRemoteWriteReceiver: true
    enableFeatures:
        - exemplar-storage
    additionalScrapeConfigs: |
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
        - role: service
        relabel_configs:

        # annotation 'prometheus.io/scrape' must be set to 'true'
        - action: keep
          regex: true
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]

        # service cannot be in kube-system or prom namespaces
        - action: drop
          regex: (kube-system|prom|observability)
          source_labels: [__meta_kubernetes_namespace]

        # service port name must end with word 'http'
        - action: keep
          regex: http
          source_labels: [__meta_kubernetes_service_port_name]

        # allow override of http scheme
        - action: replace
          regex: (https?)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          target_label: __scheme__

        # allow override of default /metrics path
        - action: replace
          regex: (.+)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          target_label: __metrics_path__

        # allow override of default port
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          target_label: __address__
        - {action: labelmap, regex: __meta_kubernetes_service_label_(.+)}
        - action: replace
          source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - action: replace
          source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name
