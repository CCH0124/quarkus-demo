quarkus.mongodb.connection-string=mongodb://vehicle:test1234@172.27.95.38:27017/vehicle?ssl=false&authSource=vehicle
quarkus.mongodb.database=vehicle

quarkus.opentelemetry.enabled=true
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://otel-my-collector-collector.observability.svc.cluster.local:4317 
quarkus.opentelemetry.tracer.resource-attributes=app=${quarkus.application.name}
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n  


quarkus.container-image.group=cch0124
quarkus.container-image.name=${quarkus.application.name:unset}
quarkus.container-image.tag=${quarkus.application.version:latest}
quarkus.container-image.registry=registry.hub.docker.com
quarkus.container-image.builder=jib
quarkus.container-image.labels."maintainer"=cch
quarkus.container-image.labels."app"=${quarkus.application.name}
quarkus.jib.base-native-image=quay.io/quarkus/quarkus-micro-image:2.0
quarkus.jib.native-arguments=-Djava.util.logging.manager=org.jboss.logmanager.LogManager,-Dquarkus.profile=prod,-Dquarkus.config.locations=${quarkus.kubernetes.mounts.app-config.path}/application.properties,-javaagent:/opentelemetry-javaagent.jar


quarkus.kubernetes.deployment-kind=Deployment
quarkus.kubernetes.part-of=${quarkus.application.name}
quarkus.kubernetes.name=${quarkus.container-image.name}
quarkus.kubernetes.version=${quarkus.container-image.tag}
quarkus.kubernetes.component=API
quarkus.kubernetes.add-build-timestamp=true
%prod.quarkus.kubernetes.namespace=prod
%stage.quarkus.kubernetes.namespace=stage
%dev.quarkus.kubernetes.namespace=dev
quarkus.kubernetes.service-account=${quarkus.container-image.name}
quarkus.kubernetes.replicas=1
quarkus.kubernetes.service-type=cluster-ip
quarkus.kubernetes.image-pull-policy=always
#if-not-present
quarkus.kubernetes.add-version-to-label-selectors=true
quarkus.kubernetes.add-name-to-label-selectors=true



quarkus.kubernetes.liveness-probe.http-action-path=/q/health/live
quarkus.kubernetes.liveness-probe.initial-delay=60s
quarkus.kubernetes.liveness-probe.period=20s
quarkus.kubernetes.liveness-probe.timeout=3s
quarkus.kubernetes.liveness-probe.success-threshold=1
quarkus.kubernetes.liveness-probe.failure-threshold=3

quarkus.kubernetes.readiness-probe.http-action-path=/q/health/ready
quarkus.kubernetes.readiness-probe.initial-delay=60s
quarkus.kubernetes.readiness-probe.period=20s
quarkus.kubernetes.readiness-probe.timeout=3s
quarkus.kubernetes.readiness-probe.success-threshold=1
quarkus.kubernetes.readiness-probe.failure-threshold=3

quarkus.kubernetes.prometheus.annotations=true
quarkus.kubernetes.prometheus.prefix=prometheus.io



quarkus.kubernetes.mounts.app-config.name=app-config
quarkus.kubernetes.mounts.app-config.path=/opt/config
quarkus.kubernetes.mounts.app-config.read-only=true

quarkus.kubernetes.config-map-volumes.app-config.config-map-name=app-config-api
quarkus.kubernetes.config-map-volumes.app-config.default-mode=0600
# Secret and ConfigMap enviroment
quarkus.kubernetes-config.enabled=true
quarkus.kubernetes-config.config-maps=app-config
quarkus.kubernetes-config.namespace=${quarkus.kubernetes.namespace}

# enviroment
quarkus.kubernetes.env.vars."quarkus.shutdown.timeout"=30

quarkus.kubernetes.env.vars."OTEL_METRICS_EXPORTER"=otlp
quarkus.kubernetes.env.vars."OTEL_RESOURCE_ATTRIBUTES"=app=${quarkus.application.name}
quarkus.kubernetes.env.vars."OTEL_EXPORTER_OTLP_METRICS_ENDPOINT"=http://otel-my-collector-collector.observability.svc.cluster.local:4317





# limits
quarkus.kubernetes.resources.requests.memory=64Mi
quarkus.kubernetes.resources.requests.cpu=100m
quarkus.kubernetes.resources.limits.memory=512Mi
quarkus.kubernetes.resources.limits.cpu=500m

# Ingress
# service will be exposed
quarkus.kubernetes.ingress.expose=true
quarkus.kubernetes.ingress.host=k8s.cch.dev
quarkus.kubernetes.ingress.annotations."nginx.ingress.kubernetes.io/rewrite-target"=/$2
quarkus.kubernetes.ingress.ingress-class-name=nginx
# quarkus.kubernetes.ingress.tls.${SECRET_NAME}.enabled=true
# quarkus.kubernetes.ingress.tls.${SECRET_NAME}.hosts=k8s.cch.dev
quarkus.kubernetes.ingress.rules.0.host=k8s.cch.dev
quarkus.kubernetes.ingress.rules.0.path=/api/v1(/|$)(.*)
quarkus.kubernetes.ingress.rules.0.path-type=Prefix
quarkus.kubernetes.ingress.rules.0.service-name=${quarkus.container-image.name}
quarkus.kubernetes.ingress.rules.0.service-port-name=http
quarkus.kubernetes.ingress.rules.0.service-port-number=${quarkus.kubernetes.ports.http.container-port:quarkus.http.port}

# security context

quarkus.kubernetes.security-context.run-as-user=1001
quarkus.kubernetes.security-context.run-as-group=0
quarkus.kubernetes.security-context.run-as-non-root=true
quarkus.kubernetes.security-context.fs-group=0
quarkus.kubernetes.container-name=${quarkus.application.name}

# defined k8s container info 會關連到 Service 類型資源
quarkus.kubernetes.ports.http.container-port=8080
quarkus.kubernetes.ports.http.path=/api/v1(/|$)(.*)
quarkus.kubernetes.ports.http.protocol=tcp
quarkus.kubernetes.ports.http.host-port=8080