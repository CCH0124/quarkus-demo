mp.messaging.incoming.played-vehicles.topic=vehicle
mp.messaging.incoming.played-vehicles.auto.offset.reset=earliest
mp.messaging.incoming.played-vehicles.connector=smallrye-kafka
mp.messaging.incoming.brands.topic=brand
mp.messaging.incoming.brands.auto.offset.reset=earliest
mp.messaging.incoming.brands.connector=smallrye-kafka
mp.messaging.incoming.played-vehicles.value.deserializer=org.cch.deserializer.VehicleDeserializer
kafka-bootstrap.servers=kafka:9092
quarkus.mongodb.connection-string=mongodb://vehicle-user:a123456789@vehicle-mongodb-0.vehicle-mongodb-svc.mongodb.svc.cluster.local:27017/vehicle?replicaSet=vehicle-mongodb&ssl=false&authSource=vehicle
#mongodb://vehicle:test1234@172.27.95.38:27017/vehicle?ssl=false&authSource=vehicle


quarkus.container-image.group=cch0124
quarkus.container-image.name=${quarkus.application.name:unset}
quarkus.container-image.tag=${quarkus.application.version:latest}
quarkus.container-image.registry=registry.hub.docker.com
quarkus.container-image.builder=jib
quarkus.container-image.labels."maintainer"=cch
quarkus.container-image.labels."app"=vehicle-consumer
quarkus.jib.base-native-image=quay.io/quarkus/quarkus-micro-image:2.0
quarkus.jib.native-arguments=-Djava.util.logging.manager=org.jboss.logmanager.LogManager
quarkus.jib.native-arguments=-Dquarkus.profile=prod
quarkus.jib.native-arguments=-Dquarkus.config.locations=${quarkus.kubernetes.mounts.app-config.path}/application.properties


quarkus.kubernetes.deployment-kind=Deployment
quarkus.kubernetes.part-of=${quarkus.application.name}
quarkus.kubernetes.name=${quarkus.container-image.name}
quarkus.kubernetes.version=${quarkus.container-image.tag}
quarkus.kubernetes.component=API
quarkus.kubernetes.add-build-timestamp=true
%prod.quarkus.kubernetes.namespace=prod
%stage.quarkus.kubernetes.namespace=stage
%dev.quarkus.kubernetes.namespace=dev
quarkus.kubernetes.service-account=${quarkus.container-image.name}
quarkus.kubernetes.replicas=1
quarkus.kubernetes.service-type=cluster-ip
quarkus.kubernetes.image-pull-policy=always
#if-not-present
quarkus.kubernetes.add-version-to-label-selectors=true
quarkus.kubernetes.add-name-to-label-selectors=true



quarkus.kubernetes.liveness-probe.http-action-path=/q/health/live
quarkus.kubernetes.liveness-probe.initial-delay=60s
quarkus.kubernetes.liveness-probe.period=20s
quarkus.kubernetes.liveness-probe.timeout=3s
quarkus.kubernetes.liveness-probe.success-threshold=1
quarkus.kubernetes.liveness-probe.failure-threshold=3

quarkus.kubernetes.readiness-probe.http-action-path=/q/health/ready
quarkus.kubernetes.readiness-probe.initial-delay=60s
quarkus.kubernetes.readiness-probe.period=20s
quarkus.kubernetes.readiness-probe.timeout=3s
quarkus.kubernetes.readiness-probe.success-threshold=1
quarkus.kubernetes.readiness-probe.failure-threshold=3

quarkus.kubernetes.prometheus.annotations=true
# https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus-kubernetes.yml
quarkus.kubernetes.prometheus.prefix=prometheus.io


quarkus.kubernetes.mounts.app-config.name=app-config
quarkus.kubernetes.mounts.app-config.path=/opt/config
quarkus.kubernetes.mounts.app-config.read-only=true

quarkus.kubernetes.config-map-volumes.app-config.config-map-name=app-config-consumer
quarkus.kubernetes.config-map-volumes.app-config.default-mode=0600
# Secret and ConfigMap enviroment
quarkus.kubernetes-config.enabled=true
quarkus.kubernetes-config.config-maps=app-config
quarkus.kubernetes-config.namespace=${quarkus.kubernetes.namespace}

# enviroment
quarkus.kubernetes.env.vars."quarkus.shutdown.timeout"=30

# limits
quarkus.kubernetes.resources.requests.memory=64Mi
quarkus.kubernetes.resources.requests.cpu=100m
quarkus.kubernetes.resources.limits.memory=512Mi
quarkus.kubernetes.resources.limits.cpu=500m

# Ingress
# service will be exposed
quarkus.kubernetes.ingress.expose=false

# security context

quarkus.kubernetes.security-context.run-as-user=1001
quarkus.kubernetes.security-context.run-as-group=0
quarkus.kubernetes.security-context.run-as-non-root=true
quarkus.kubernetes.security-context.fs-group=0
quarkus.kubernetes.container-name=${quarkus.application.name}
