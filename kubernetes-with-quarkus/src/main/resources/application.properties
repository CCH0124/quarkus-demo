quarkus.mongodb.connection-string=mongodb://172.24.3.14:27017
quarkus.mongodb.database=devices
quarkus.mongodb.credentials.username=test
quarkus.mongodb.credentials.password=test1234
quarkus.mongodb.credentials.auth-source=admin
quarkus.mongodb.credentials.auth-mechanism=SCRAM_SHA_256
%dev.quarkus.log.category."io.quarkus.mongodb.panache.runtime".level=DEBUG

mqtt.connect.clientKeystore=kubernetes/emqx/keystore/truststore.p12
mqtt.connect.clientKeypass=1qaz@WSX
mqtt.connect.trustKeystore=kubernetes/emqx/keystore/keystore.jks
mqtt.connect.trustKeypass=1qaz@WSX
mqtt.connect.brokerUrl=emqx.dev.svc.cluster.local
mqtt.connect.topic=cmd/state/+

quarkus.container-image.group=cch0124
quarkus.container-image.name=${quarkus.application.name:unset}
quarkus.container-image.tag=${quarkus.application.version:latest}
quarkus.container-image.registry=registry.hub.docker.com
quarkus.container-image.push=true
quarkus.container-image.build=true
quarkus.container-image.builder=jib
quarkus.container-image.labels=maintainer='cch'\\,app='kubernetes-with-quarkus'
quarkus.jib.base-native-image=quay.io/quarkus/quarkus-micro-image:2.0
quarkus.jib.native-arguments=-Djava.util.logging.manager=org.jboss.logmanager.LogManager
# quarkus.jib.working-directory=/home/jboss

quarkus.kubernetes.deployment-kind=Deployment
quarkus.kubernetes.part-of=${quarkus.application.name}
quarkus.kubernetes.name=${quarkus.container-image.name}
quarkus.kubernetes.version=${quarkus.container-image.tag}
quarkus.kubernetes.component=API
quarkus.kubernetes.add-build-timestamp=true
%dev.quarkus.kubernetes.namespace=dev
%stage.quarkus.kubernetes.namespace=stage
quarkus.kubernetes.namespace=prod
quarkus.kubernetes.service-account=${quarkus.container-image.name}
quarkus.kubernetes.replicas=1
quarkus.kubernetes.service-type=cluster-ip
quarkus.kubernetes.image-pull-policy=if-not-present
quarkus.kubernetes.add-version-to-label-selectors=true
quarkus.kubernetes.add-name-to-label-selectors=true



quarkus.kubernetes.liveness-probe.http-action-path=/q/health/live
quarkus.kubernetes.liveness-probe.initial-delay=60s
quarkus.kubernetes.liveness-probe.period=20s
quarkus.kubernetes.liveness-probe.timeout=3s
quarkus.kubernetes.liveness-probe.success-threshold=1
quarkus.kubernetes.liveness-probe.failure-threshold=3

quarkus.kubernetes.readiness-probe.http-action-path=/q/health/ready
quarkus.kubernetes.readiness-probe.initial-delay=60s
quarkus.kubernetes.readiness-probe.period=20s
quarkus.kubernetes.readiness-probe.timeout=3s
quarkus.kubernetes.readiness-probe.success-threshold=1
quarkus.kubernetes.readiness-probe.failure-threshold=3

quarkus.kubernetes.prometheus.annotations=true
# https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus-kubernetes.yml
quarkus.kubernetes.prometheus.prefix=prometheus.io
#quarkus.kubernetes.prometheus.scrape=
#quarkus.kubernetes.prometheus.path=/q/metrics
#quarkus.kubernetes.prometheus.port=8080
#quarkus.kubernetes.prometheus.scheme=http


# limits
quarkus.kubernetes.resources.requests.memory=64Mi
quarkus.kubernetes.resources.requests.cpu=250m
quarkus.kubernetes.resources.limits.memory=512Mi
quarkus.kubernetes.resources.limits.cpu=1000m

# Ingress
quarkus.kubernetes.expose=true
# service will be exposed
quarkus.kubernetes.ingress.expose=true
quarkus.kubernetes.ingress.host=k8s.cch.dev
quarkus.kubernetes.ingress.annotations."nginx.ingress.kubernetes.io/rewrite-target"=/$2
# quarkus.kubernetes.ingress.tls.${SECRET_NAME}.enabled=true
# quarkus.kubernetes.ingress.tls.${SECRET_NAME}.hosts=k8s.cch.dev
quarkus.kubernetes.ingress.rules.0.host=k8s.cch.dev
quarkus.kubernetes.ingress.rules.0.path=/api/v1(/|$)(.*)
quarkus.kubernetes.ingress.rules.0.path-type=Prefix
quarkus.kubernetes.ingress.rules.0.service-name=${quarkus.container-image.name}
quarkus.kubernetes.ingress.rules.0.service-port-name=http
quarkus.kubernetes.ingress.rules.0.service-port-number=${quarkus.kubernetes.ports.http.container-port:quarkus.http.port}


#  Quarkus will attempt to deploy the application to the target Kubernetes cluster
quarkus.kubernetes.deploy=true
quarkus.kubernetes.deployment-target=kubernetes

# security context

quarkus.kubernetes.security-context.run-as-user=1001
quarkus.kubernetes.security-context.run-as-group=1001
quarkus.kubernetes.security-context.run-as-non-root=true
quarkus.kubernetes.security-context.fs-group=1001
quarkus.kubernetes.container-name=${quarkus.application.name}

# defined k8s container info 會關連到 Service 類型資源
quarkus.kubernetes.ports.http.container-port=8080
quarkus.kubernetes.ports.http.path=/
quarkus.kubernetes.ports.http.protocol=tcp


quarkus.helm.name=${quarkus.application.name}
quarkus.helm.home=https://github.com/CCH0124/quarkus-demo
quarkus.helm.sources=https://github.com/CCH0124/quarkus-demo
quarkus.helm.version=${quarkus.application.version:latest}